@model List<SelectListItem>
@*@model AppGiros.Models.GirosViewModel*@

@{
    ViewData["Title"] = "Giros";
}



<h1>Giros</h1>


<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <div class="form-group">
            Pais
            @Html.DropDownList("Paises", Model, new { @class = "form-control", id="idPais" }) @*// Alarga los botones*@
        </div>
        <div class="form-group">
            Ciudad
            <select id="ciudad" name="ciudad" class="form-control"></select>
        </div>
    </div>
</div>

<table id="tablaDatos">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Descripción</th>
        </tr>
    </thead>
    <tbody>
        <!-- Aquí se llenarán los datos de la tabla -->
    </tbody>
</table>

<script>
    var cboPais = document.getElementById("idPais");
    var cboCiudad = document.getElementById("ciudad");
    cboPais.addEventListener("change", refreshCiudades);
    cboCiudad.addEventListener("change", refreshDatos);

    // Llena la lista de ciudades según el país seleccionado
    function refreshCiudades() {
        var idPais = cboPais.value;
        fetch("@Url.Content("~/Ciudad/GetCiudades")" + "?idPais=" + idPais)
            .then(function (result) {
                if (result.ok) {
                    return result.json();
                }
            })
            .then(function (data) {
                cboCiudad.innerHTML = ""; // Limpiar las opciones anteriores
                // Agregar las nuevas opciones
                data.forEach(function (element) {
                    let eOption = document.createElement("option");
                    eOption.appendChild(document.createTextNode(element.Text));
                    eOption.value = element.Value;
                    cboCiudad.appendChild(eOption);
                });
                // Disparar el evento 'change' para actualizar los datos de la tabla
                refreshDatos();
            });
    }

    // Actualiza los datos de la tabla según la ciudad seleccionada
    function refreshDatos() {
        var idCiudad = cboCiudad.value;
        fetch("@Url.Content("~/Giros/GetGiros")" + "?idCiudad=" + idCiudad)
            .then(function (result) {
                if (result.ok) {
                    return result.json();
                }
            })
            .then(function (data) {
                var tablaDatos = document.getElementById("tablaDatos");
                var tbody = tablaDatos.getElementsByTagName("tbody")[0];
                // Limpiar los datos anteriores de la tabla
                tbody.innerHTML = "";
                // Agregar los nuevos datos a la tabla
                data.forEach(function (element) {
                    var row = tbody.insertRow();
                    var cell1 = row.insertCell(0);
                    var cell2 = row.insertCell(1);
                    cell1.innerHTML = element.Nombre;
                    cell2.innerHTML = element.Descripcion;
                });
            });
    }

    // Ejecutar para llenar la lista de ciudades al cargar la página
    refreshCiudades();
</script>










@*<script>
    var cboPais = document.getElementById("idPais");
    var cboCiudad = document.getElementById("ciudad");
    cboPais.addEventListener("change", refreshCiudades);
    cboCiudad.addEventListener("change", refreshDatos);

    // Llena la lista de ciudades según el país seleccionado
    function refreshCiudades() {
        var idPais = cboPais.value;
        fetch("@Url.Content("~/Ciudad/GetCiudades")" + "?idPais=" + idPais)
            .then(function (result) {
                if (result.ok) {
                    return result.json();
                }
            })
            .then(function (data) {
                cboCiudad.innerHTML = ""; // Limpiar las opciones anteriores
                // Agregar las nuevas opciones
                data.forEach(function (element) {
                    let eOption = document.createElement("option");
                    eOption.appendChild(document.createTextNode(element.Text));
                    eOption.value = element.Value;
                    cboCiudad.appendChild(eOption);
                });
                // Disparar el evento 'change' para actualizar los datos de la tabla
                refreshDatos();
            });
    }

    // Actualiza los datos de la tabla según la ciudad seleccionada
    function refreshDatos() {
        var idCiudad = cboCiudad.value;
        fetch("@Url.Content("~/Giros/GetGiros")" + "?idCiudad=" + idCiudad)
            .then(function (result) {
                if (result.ok) {
                    return result.json();
                }
            })
            .then(function (data) {
                var tablaDatos = document.getElementById("tablaDatos");
                var tbody = tablaDatos.getElementsByTagName("tbody")[0];
                // Limpiar los datos anteriores de la tabla
                tbody.innerHTML = "";
                // Agregar los nuevos datos a la tabla
                data.forEach(function (element) {
                    var row = tbody.insertRow();
                    var cell1 = row.insertCell(0);
                    var cell2 = row.insertCell(1);
                    cell1.innerHTML = element.Nombre;
                    cell2.innerHTML = element.Descripcion;
                });
            });
    }

    // Ejecutar para llenar la lista de ciudades al cargar la página
    refreshCiudades();
</script>*@
