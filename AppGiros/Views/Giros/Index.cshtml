
@{
    ViewData["Title"] = "Giros";
}

<h1>Giros</h1>
<br/>


<div>
    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#crearGiroModal">Crear Giro</button>
</div>

<div class="form-group mb-3">
    <label for="idPais">País</label>
    <select id="idPais" class="form-control">
        <option value="">Seleccione un país</option>
    </select>
</div>

<div class="form-group">
    <label for="idCiudad">Ciudad</label>
    <select id="idCiudad" class="form-control">
        <option value="">Seleccione una ciudad</option>
    </select>
</div>

<br />
<br />

<!-- Contenedor para mostrar los giros -->
<div class="form-group">
    <h4>Giros de la ciudad</h4>
    <table class="table table-striped table-bordered table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Recibo</th>
                <th>Ciudad</th>
            </tr>
        </thead>
        <tbody id="tblGiros">
            <!-- Aquí se llenarán los giros dinámicamente -->
        </tbody>
    </table>
</div>

<!-- Modal para Crear Giro -->
<div class="modal fade" id="crearGiroModal" tabindex="-1" aria-labelledby="crearGiroModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crearGiroModalLabel">Crear Giro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="crearGiroForm">
                    <div class="mb-3">
                        <label for="inpRecibo" class="form-label">Recibo</label>
                        <input type="text" class="form-control" id="inpRecibo" name="recibo" placeholder="Ingrese el número del recibo" required>
                    </div>
                    <div class="mb-3">
                        <label for="idPaisModal" class="form-label">Pais</label>
                        <select class="form-control" id="idPaisModal" name="idPaisModal" required>
                            <option value="">Seleccione un pais</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="idCiudadModal" class="form-label">Ciudad</label>
                        <select class="form-control" id="idCiudadModal" name="idCiudad" required>
                            <option value="">Seleccione una ciudad</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="guardarGiroBtn">Guardar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        var cboPais = document.getElementById("idPais");
        var cboCiudad = document.getElementById("idCiudad");

        var lstPaices = [];
        var lstCiudadesPais = [];

        var cboModalPais = document.getElementById("idPaisModal");
        var cboModalCiudad = document.getElementById("idCiudadModal");

        $(document).ready(function () {

            obtenerPaises();

            $('#crearGiroModal').on('hidden.bs.modal', function () {
                limpiarModalGiros();
            });
        });

        function agregarPaises(lstPaises){
            console.log("nueva funcion");
            lstPaises.forEach(pais => {
                        let option = document.createElement("option");
                        option.value = pais.idPais;
                        option.textContent = pais.nombre;
                        cboModalPais.appendChild(option);
                    });
        }

        function limpiarModalGiros() {
            $("#inpRecibo").val('');
            $("#idPaisModal").val('');
            $("#idCiudadModal").val('');
            idPais = '';
        }

        function obtenerPaises() {
            fetch("@Url.Action("ObtenerPaises", "Paises")")
                .then(response => response.json())
                .then(data => {
                    console.log("data paises: ", data);
                    lstPaices = data; 
                    data.forEach(pais => {
                        let option = document.createElement("option");
                        option.value = pais.idPais;
                        option.textContent = pais.nombre;
                        cboPais.appendChild(option);
                    });
                    agregarPaises(lstPaices);
                })
                .catch(error => console.error("Error al cargar los países:", error));
        }

        // Cargar las ciudades al seleccionar un país
        cboPais.addEventListener("change", function () {

            var idPais = cboPais.value;
            // Limpiar las ciudades anteriores
            cboCiudad.innerHTML = '<option value="">Seleccione una ciudad</option>';

            if (idPais) {
                fetch("@Url.Action("ObtenerCiudadesPais", "Ciudad")" + "?idPais=" + idPais)
                    .then(response => response.json())
                    .then(data => {
                        console.log("data ciudades: ", data);
                        lstCiudadesPais = data; 
                        data.forEach(ciudad => {
                            let option = document.createElement("option");
                            option.value = ciudad.id;
                            option.textContent = ciudad.nombre;
                            cboCiudad.appendChild(option);
                        });
                    })
                    .catch(error => console.error("Error al cargar las ciudades:", error));
            }
        });

        // Cargar los giros al seleccionar una ciudad
        cboCiudad.addEventListener("change", function () {
        var idCiudad = cboCiudad.value;

            // Limpiar los giros anteriores
            tblGiros.innerHTML = '';

            if (idCiudad) {
                fetch("@Url.Action("ObtenerGirosCiudad", "Giros")" + "?idCiudad=" + idCiudad)
                    .then(response => response.json())
                    .then(data => {
                        console.log("giros", data);
                        data.forEach(giro => {
                            let row = `
                                <tr>
                                    <td>${giro.id}</td>
                                    <td>${giro.recibo}</td>
                                    <td>${giro.idCiudad}</td>
                                </tr>
                            `;
                            tblGiros.innerHTML += row;
                        });
                    })
                    .catch(error => console.error("Error al cargar los giros:", error));
            }
        });

        document.getElementById("guardarGiroBtn").addEventListener("click", function () {
        
        const recibo = document.getElementById("inpRecibo").value;
        const idCiudad = document.getElementById("idCiudadModal").value;

        if (!recibo || !idCiudad) {
            alert("Por favor, complete todos los campos.");
            return;
        }

        const giro = {
            Recibo: recibo,
            IdCiudad: parseInt(idCiudad)
        };

        fetch("@Url.Action("CrearGiro", "Giros")", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(giro)
        })
            .then(response => {
                if (response.ok) {
                    alert("Giro creado exitosamente.");
                    document.getElementById("crearGiroForm").reset();
                    document.getElementById("idCiudadModal").innerHTML = '<option value="">Seleccione una ciudad</option>';
                    var modal = bootstrap.Modal.getInstance(document.getElementById("crearGiroModal"));
                    modal.hide();
                } else {
                    alert("Error al crear el giro.");
                }
            })
            .catch(error => console.error("Error:", error));
         });

        /* Modal crear giro */
        // Cargar las ciudades al seleccionar un país
        cboModalPais.addEventListener("change", function () {

            var idPais = cboModalPais.value;
            // Limpiar las ciudades anteriores
            cboModalCiudad.innerHTML = '<option value="">Seleccione una ciudad</option>';

            if (idPais) {
                fetch("@Url.Action("ObtenerCiudadesPais", "Ciudad")" + "?idPais=" + idPais)
                    .then(response => response.json())
                    .then(data => {
                        lstCiudadesPais = data;
                        data.forEach(ciudad => {
                            let option = document.createElement("option");
                            option.value = ciudad.id;
                            option.textContent = ciudad.nombre;
                            cboModalCiudad.appendChild(option);
                        });
                    })
                    .catch(error => console.error("Error al cargar las ciudades:", error));
            }
        });

    </script>
}
